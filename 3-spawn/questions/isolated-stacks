If two processes share a stack, there would be potential corruption whenever there is a context switch.  A context switch can happen at any time, potentially generated by a hardware interrupt or debug break instruction, and a process could be in the middle modifying the stack.

If one process just pushed a few elements on the stack, and another process resumes and starts popping, then the two processes could corrupt the stack.

To processes could potentially share a stack if we can guarantee that the stack is balanced whenever a context switch occurs, either by only allowing a context switch when the stack is returned back to the same point-- like when the process has finished executing and reached the bottom of its stack.

This could also work if the processes could interleave their stack, such as by doing a locked operation to increment the stack pointer to write to it, and then store the address of the previous stack pointer so that it can undo it reliably later.
